package cn.lihua.week07;

/**
 * 36. 有效的数独
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

 数字 1-9 在每一行只能出现一次。
 数字 1-9 在每一列只能出现一次。
 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


 上图是一个部分填充的有效的数独。

 数独部分空格内已填入了数字，空白格用 '.' 表示。

 示例 1:

 输入:
 [
 ["5","3",".",".","7",".",".",".","."],
 ["6",".",".","1","9","5",".",".","."],
 [".","9","8",".",".",".",".","6","."],
 ["8",".",".",".","6",".",".",".","3"],
 ["4",".",".","8",".","3",".",".","1"],
 ["7",".",".",".","2",".",".",".","6"],
 [".","6",".",".",".",".","2","8","."],
 [".",".",".","4","1","9",".",".","5"],
 [".",".",".",".","8",".",".","7","9"]
 ]
 输出: true
 示例 2:

 输入:
 [
   ["8","3",".",".","7",".",".",".","."],
   ["6",".",".","1","9","5",".",".","."],
   [".","9","8",".",".",".",".","6","."],
   ["8",".",".",".","6",".",".",".","3"],
   ["4",".",".","8",".","3",".",".","1"],
   ["7",".",".",".","2",".",".",".","6"],
   [".","6",".",".",".",".","2","8","."],
   [".",".",".","4","1","9",".",".","5"],
   [".",".",".",".","8",".",".","7","9"]
 ]
 输出: false
 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 说明:

 一个有效的数独（部分已被填充） 不一定是可解的。
 只需要根据以上规则，验证已经填入的数字是否有效即可。
 给定数独序列只包含数字 1-9 和字符 '.' 。
 给定数独永远是 9x9 形式的。
 */
public class N36ValidSudoku {

    /**
     * 一次迭代,时间复杂度O(1)
     */
    public boolean isValidSudoku(char[][] board) {
        // 存储某一行的某个数是否出现过,如row[0][4]:第0行的数值5(4+1)有没有出现过,0为没出现,1为出现过
        int[][] row = new int[9][9];
        // 存储某一列的某个数是否出现过,如col[0][4]:第0列的数值5有没有出现过
        int[][] col = new int[9][9];
        // 存储某一box的某个数是否出现过,如box[0][4]:第0个box的数值5有没有出现过
        int[][] box = new int[9][9];

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                // 排除不合法的选择
                if (board[i][j] == '.') continue;
                // 判断当前的数是否满足要求
                int curNum = board[i][j] - '1'; // 若字符'5',转成4,为了下标不越界
                if (row[i][curNum] == 1) return false;
                if (col[j][curNum] == 1) return false;
                if (box[i / 3 * 3 + j / 3][curNum] == 1) return false;
                // 行\列\子数独 中有没有已经出现过此数
                row[i][curNum] = 1;
                col[j][curNum] = 1;
                box[i / 3 * 3 + j / 3][curNum] = 1;
            }
        }
        return true;
    }


    public boolean isValidSudoku2(char[][] board) {
        int[][] row = new int[9][9];
        int[][] col = new int[9][9];
        int[][] box = new int[9][9];

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;
                int currNum = board[i][j] - '1';
                if (row[i][currNum] != 0) return false;
                if (col[j][currNum] != 0) return false;
                if (box[i / 3 * 3 + j / 3][currNum] != 0) return false;
                row[i][currNum] = 1;
                col[j][currNum] = 1;
                box[i / 3 * 3 + j / 3][currNum] = 1;
            }
        }
        return true;
    }
}
